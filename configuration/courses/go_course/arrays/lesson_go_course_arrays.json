{
    "title": "Working with Slices",
    "slug": "go-arrays",
    "content": "# Working with Slices in Go\n\nLearn how to manipulate slices in Go.\n\n## What are Slices?\n\nIn Go, slices are dynamically-sized arrays. They are more flexible than arrays and are the most commonly used data structure for collections in Go.\n\n## Exercise\n\nImplement functions to work with slices:\n- `ReverseSlice(slice []int) []int`: Return a new slice with elements in reverse order\n- `FindMax(slice []int) (int, bool)`: Find the maximum element in the slice, return value and whether slice was empty\n- `SumSlice(slice []int) int`: Calculate the sum of all elements",
    "language": "go",
    "template": "package main\n\nimport \"fmt\"\n\n// ReverseSlice returns a new slice with elements in reverse order\nfunc ReverseSlice(slice []int) []int {\n\t// Write your code here\n\treturn nil\n}\n\n// FindMax finds the maximum element in the slice\n// Returns the max value and a boolean indicating if the slice was not empty\nfunc FindMax(slice []int) (int, bool) {\n\t// Write your code here\n\treturn 0, false\n}\n\n// SumSlice calculates the sum of all elements in the slice\nfunc SumSlice(slice []int) int {\n\t// Write your code here\n\treturn 0\n}\n\nfunc main() {\n\t// Test your functions here\n\tfmt.Println(\"Testing slice functions...\")\n}",
    "createdAt": "2025-01-01T00:00:00.000Z",
    "updatedAt": "2025-01-01T00:00:00.000Z",
    "order": 1,
    "testConfig": {
        "timeoutMs": 15000,
        "memoryLimitMb": 512,
        "testTemplate": "package main\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n)\n\nfunc TestReverseSlice(t *testing.T) {\n\ttests := []struct {\n\t\tname     string\n\t\tinput    []int\n\t\texpected []int\n\t}{\n\t\t{\"reverse [1,2,3]\", []int{1, 2, 3}, []int{3, 2, 1}},\n\t\t{\"reverse empty slice\", []int{}, []int{}},\n\t\t{\"reverse single element\", []int{5}, []int{5}},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tresult := ReverseSlice(tt.input)\n\t\t\tif !reflect.DeepEqual(result, tt.expected) {\n\t\t\t\tt.Errorf(\"ReverseSlice(%v) = %v, want %v\", tt.input, result, tt.expected)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestFindMax(t *testing.T) {\n\ttests := []struct {\n\t\tname        string\n\t\tinput       []int\n\t\texpectedVal int\n\t\texpectedOk  bool\n\t}{\n\t\t{\"find max in [1,5,3]\", []int{1, 5, 3}, 5, true},\n\t\t{\"find max in single element\", []int{10}, 10, true},\n\t\t{\"find max in empty slice\", []int{}, 0, false},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tval, ok := FindMax(tt.input)\n\t\t\tif val != tt.expectedVal || ok != tt.expectedOk {\n\t\t\t\tt.Errorf(\"FindMax(%v) = (%v, %v), want (%v, %v)\", tt.input, val, ok, tt.expectedVal, tt.expectedOk)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestSumSlice(t *testing.T) {\n\ttests := []struct {\n\t\tname     string\n\t\tinput    []int\n\t\texpected int\n\t}{\n\t\t{\"sum [1,2,3]\", []int{1, 2, 3}, 6},\n\t\t{\"sum empty slice\", []int{}, 0},\n\t\t{\"sum single element\", []int{10}, 10},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tresult := SumSlice(tt.input)\n\t\t\tif result != tt.expected {\n\t\t\t\tt.Errorf(\"SumSlice(%v) = %v, want %v\", tt.input, result, tt.expected)\n\t\t\t}\n\t\t})\n\t}\n}",
        "testCases": [
            {
                "name": "test_reverse_slice_1",
                "input": [
                    1,
                    2,
                    3
                ],
                "expectedOutput": [
                    3,
                    2,
                    1
                ],
                "description": "Test reversing slice [1, 2, 3]"
            },
            {
                "name": "test_find_max_1",
                "input": [
                    1,
                    5,
                    3
                ],
                "expectedOutput": 5,
                "description": "Test finding max in [1, 5, 3]"
            },
            {
                "name": "test_sum_slice_1",
                "input": [
                    1,
                    2,
                    3
                ],
                "expectedOutput": 6,
                "description": "Test summing slice [1, 2, 3]"
            }
        ],
        "keywordRequirements": [
            {
                "keyword": "func",
                "description": "Must use function definitions",
                "required": true,
                "caseSensitive": true,
                "allowPartialMatch": false,
                "minOccurrences": 3
            }
        ]
    },
    "additionalResources": [
        {
            "url": "https://go.dev/tour/moretypes/7",
            "title": "Go Slices Documentation"
        }
    ],
    "tags": [
        "go",
        "slices",
        "arrays"
    ],
    "status": "published"
}