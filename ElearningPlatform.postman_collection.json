{
	"info": {
		"_postman_id": "02efac5a-b0fe-41e6-87ae-6df493ca6ddb",
		"name": "ElearningPlatform",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33345036"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"item": [
						{
							"name": "Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// Save the refresh_token to an environment variable",
											"pm.environment.set(\"refresh_token\", jsonData.data.refresh_token);",
											"pm.environment.set(\"access_token\", jsonData.data.access_token);",
											"// Generate a random email before running the request",
											"pm.environment.set(\"email\", jsonData.data.user.email);",
											"// Test to check if the response contains a success property",
											"pm.test(\"Response has a success property\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('success');",
											"});",
											"",
											"// Test to check if the response data contains access_token, refresh_token, and user properties",
											"pm.test(\"Response data contains access_token, refresh_token, and user properties\", function () {",
											"    pm.expect(pm.response.json().data).to.have.property('access_token');",
											"    pm.expect(pm.response.json().data).to.have.property('refresh_token');",
											"    pm.expect(pm.response.json().data.user).to.have.property('id');",
											"    pm.expect(pm.response.json().data.user).to.have.property('email');",
											"    pm.expect(pm.response.json().data.user).to.have.property('username');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{$randomExampleEmail}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/auth/register",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"Idell.Nader7@example.org\",\n    \"password\": \"password\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5171/api/auth/register",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5171",
											"path": [
												"api",
												"auth",
												"register"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Length",
											"value": "677"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Fri, 28 Mar 2025 16:13:45 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Location",
											"value": "api/auth/register"
										}
									],
									"cookie": [],
									"body": "{\n    \"success\": true,\n    \"data\": {\n        \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJmY2Q0NzlkYS1kMjU1LTRjNzYtOWQyMy02Y2Q5NTNmYzJiZDgiLCJlbWFpbCI6IktpcmtfR3JlZW5mZWxkZXI1NUBleGFtcGxlLmNvbSIsIm5iZiI6MTc0MzE3ODQyNiwiZXhwIjoxNzQzMTgyMDI2LCJpYXQiOjE3NDMxNzg0MjYsImlzcyI6IkVsZWFybmluZ1BsYXRmb3JtIiwiYXVkIjoiRWxlYXJuaW5nUGxhdGZvcm1BdWRpZW5jZSJ9.1_630IHspF-VdirJMgXvWVlTYxArtmpBdjqzWDytr3w\",\n        \"refresh_token\": \"B6iClydPhejiyBCXgzT6NEfWXD7YMpaLEdR7TOtB+7M=\",\n        \"user\": {\n            \"id\": \"fcd479da-d255-4c76-9d23-6cd953fc2bd8\",\n            \"email\": \"Kirk_Greenfelder55@example.com\",\n            \"username\": \"Kirk_Greenfelder55\"\n        }\n    },\n    \"message\": \"Operation successful\"\n}"
								}
							]
						},
						{
							"name": "User already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// Save the refresh_token to an environment variable",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Response status code is 409\", function () {",
											"  pm.expect(pm.response.code).to.equal(409);",
											"});",
											"",
											"pm.test(\"Response has the required Content-Type header\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Success should be false\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.success).to.equal(false);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/auth/register",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": [
								{
									"name": "User already exists",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"test@test.com\",\n    \"password\": \"password\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5171/api/auth/register",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5171",
											"path": [
												"api",
												"auth",
												"register"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 28 Mar 2025 16:10:45 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"success\": false,\n    \"message\": \"User with this email already exists.\"\n}"
								}
							]
						},
						{
							"name": "Validation error password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"",
											"pm.test(\"Message field is either empty or contains an appropriate error message\", function () {",
											"    pm.expect(jsonData.message).to.satisfy(function (message) {",
											"        return message === \"\" || typeof message === 'string';",
											"    }, \"Message should be either empty or a string\");",
											"});",
											"",
											"pm.test(\"Errors array is not empty and contains specific error messages related to registration\", function () {",
											"    pm.expect(jsonData.errors).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Errors array should not be empty\");",
											"    jsonData.errors.forEach(function(error) {",
											"        pm.expect(error).to.be.a('string').and.to.not.be.empty;",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{email}}\"\n    // \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/auth/register",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": [
								{
									"name": "Validation error password",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"test@test.com\"\n    // \"password\": \"password\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5171/api/auth/register",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5171",
											"path": [
												"api",
												"auth",
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 28 Mar 2025 16:11:19 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"success\": false,\n    \"message\": \"Validation failed.\",\n    \"errors\": [\n        \"Password is required\"\n    ]\n}"
								}
							]
						},
						{
							"name": "Validation error email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - success, message, and errors\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.include.all.keys('success', 'message', 'errors');",
											"});",
											"",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string or null\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.satisfy((message) => {",
											"        return typeof message === 'string' || message === null;",
											"    }, \"Message should be a non-empty string or null\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    // \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/auth/register",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": [
								{
									"name": "Validation error email",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    // \"email\": \"test@test.com\",\n    \"password\": \"password\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5171/api/auth/register",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5171",
											"path": [
												"api",
												"auth",
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 28 Mar 2025 16:11:49 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"success\": false,\n    \"message\": \"Validation failed.\",\n    \"errors\": [\n        \"Email is required\"\n    ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// Save the refresh_token to an environment variable",
											"pm.environment.set(\"refresh_token\", jsonData.data.refresh_token);",
											"pm.environment.set(\"access_token\", jsonData.data.access_token);",
											"// Test to check the response structure and properties",
											"pm.test(\"Response body structure is valid\", function () {",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.have.property('access_token');",
											"    pm.expect(jsonData.data).to.have.property('refresh_token');",
											"    pm.expect(jsonData.data).to.have.property('user');",
											"    pm.expect(jsonData.data.user).to.have.property('id');",
											"    pm.expect(jsonData.data.user).to.have.property('email');",
											"    pm.expect(jsonData.data.user).to.have.property('username');",
											"    pm.expect(jsonData).to.have.property('message', \"Operation successful\");",
											"});",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Access token is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.data.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Refresh token is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data.refresh_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/auth/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body has success as false\", function () {",
											"    pm.expect(pm.response.json().success).to.be.false;",
											"});",
											"",
											"pm.test(\"Response message is 'Invalid email or password.'\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Invalid email or password.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}5123451346\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/auth/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RefreshToken",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/refresh-token",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"refresh-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "RevokeToken",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/revoke-token",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"revoke-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// Save the refresh_token to an environment variable",
									"pm.environment.set(\"refresh_token\", jsonData.data.refresh_token);",
									"pm.environment.set(\"access_token\", jsonData.data.access_token);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// Save the refresh_token to an environment variable",
									"pm.environment.set(\"refresh_token\", jsonData.data.refresh_token);",
									"pm.environment.set(\"access_token\", jsonData.data.access_token);",
									"pm.environment.set(\"email\", jsonData.data.user.email);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomExampleEmail}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/register",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "randomEmail",
			"value": ""
		},
		{
			"key": "emaik",
			"value": ""
		}
	]
}