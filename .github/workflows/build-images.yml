name: Docker Build Workflow

on:
  pull_request:
    paths:
      - "configuration/docker/**"
    branches:
      - main
      - master
      - develop
  push:
    branches:
      - main
      - master

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      docker_changed: ${{ steps.filter.outputs.docker }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for docker configuration changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            docker:
              - 'configuration/docker/**'

  build-docker-images:
    needs: check-changes
    if: ${{ needs.check-changes.outputs.docker_changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get PR number
        id: pr
        run: echo "pr_number=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')" >> $GITHUB_OUTPUT

      - name: Build Docker images
        working-directory: ./configuration/docker
        run: |
          chmod +x ./build-images.sh
          DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} ./build-images.sh
        env:
          PR_NUMBER: ${{ steps.pr.outputs.pr_number }}

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.issue.number;
            const dockerUsername = process.env.DOCKERHUB_USERNAME;

            // Get file list to understand which Docker images were built
            const { execSync } = require('child_process');
            const changedFiles = execSync('git diff --name-only origin/${{ github.base_ref }}...HEAD -- configuration/docker/environments').toString().trim().split('\n');

            // Extract languages and types from changed Dockerfiles
            const dockerFiles = changedFiles.filter(file => file.endsWith('.dockerfile'));
            const builtImages = dockerFiles.map(file => {
              const parts = file.split('/');
              const filename = parts[parts.length - 1];
              const language = filename.split('.')[0];
              const type = parts[parts.length - 2] === 'runners' ? 'runner' : 'tester';
              return `${dockerUsername}/ascenddev-${language}-${type}:latest`;
            });

            // Prepare comment
            let commentBody = `### Docker images built for PR #${prNumber} 🐳\n\n`;

            if (builtImages.length > 0) {
              commentBody += 'The following Docker images were built:\n\n';
              builtImages.forEach(image => {
                commentBody += `- \`${image}\`\n`;
              });
            } else {
              commentBody += 'Docker configuration files were changed, but no Dockerfile changes were detected.';
            }

            // Add PR link to Docker Hub
            commentBody += '\n\nImages are available on Docker Hub under your account.';

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
