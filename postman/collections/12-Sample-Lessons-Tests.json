{
    "info": {
        "_postman_id": "sample-lessons-tests",
        "name": "12 - Sample Lessons Tests",
        "description": "Comprehensive test collection for all language lessons (Python, JavaScript, TypeScript, Go) based on docker runners",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Python Tests",
            "item": [
                {
                    "name": "Python Arrays - Working Solution",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has test results\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "    pm.expect(jsonData).to.have.property('testResults');",
                                    "    ",
                                    "    console.log('Python Arrays test result:');",
                                    "    console.log('Success:', jsonData.success);",
                                    "    console.log('Test Results:', jsonData.testResults?.length || 0, 'tests');",
                                    "});",
                                    "",
                                    "pm.test(\"Test results have names\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    if (jsonData.testResults && jsonData.testResults.length > 0) {",
                                    "        jsonData.testResults.forEach((testResult, index) => {",
                                    "            pm.expect(testResult).to.have.property('testName');",
                                    "            pm.expect(testResult.testName).to.not.be.empty;",
                                    "            console.log(`Test ${index + 1}: ${testResult.testName} - ${testResult.passed ? 'PASSED' : 'FAILED'}`);",
                                    "        });",
                                    "    }",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"LessonId\": \"python-arrays\",\n    \"Code\": \"def reverse_array(arr):\\n    return arr[::-1]\\n\\ndef find_max(arr):\\n    if not arr:\\n        return None\\n    return max(arr)\\n\\ndef sum_array(arr):\\n    return sum(arr)\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/tests/run",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "tests",
                                "run"
                            ]
                        },
                        "description": "Test Python arrays lesson with correct implementation"
                    },
                    "response": []
                },
                {
                    "name": "Python Functions - Working Solution",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has test results\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "    pm.expect(jsonData).to.have.property('testResults');",
                                    "    ",
                                    "    console.log('Python Functions test result:');",
                                    "    console.log('Success:', jsonData.success);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"LessonId\": \"python-functions\",\n    \"Code\": \"def add_numbers(a, b):\\n    return a + b\\n\\ndef multiply_numbers(a, b):\\n    return a * b\\n\\ndef calculate_factorial(n):\\n    if n <= 1:\\n        return 1\\n    result = 1\\n    for i in range(2, n + 1):\\n        result *= i\\n    return result\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/tests/run",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "tests",
                                "run"
                            ]
                        },
                        "description": "Test Python functions lesson with correct implementation"
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "JavaScript Tests",
            "item": [
                {
                    "name": "JavaScript Arrays - Working Solution",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has test results\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "    pm.expect(jsonData).to.have.property('testResults');",
                                    "    ",
                                    "    console.log('JavaScript Arrays test result:');",
                                    "    console.log('Success:', jsonData.success);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"LessonId\": \"javascript-arrays\",\n    \"Code\": \"function reverseArray(arr) {\\n    return arr.slice().reverse();\\n}\\n\\nfunction findMax(arr) {\\n    if (arr.length === 0) return undefined;\\n    return Math.max(...arr);\\n}\\n\\nfunction sumArray(arr) {\\n    return arr.reduce((sum, num) => sum + num, 0);\\n}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/tests/run",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "tests",
                                "run"
                            ]
                        },
                        "description": "Test JavaScript arrays lesson with correct implementation"
                    },
                    "response": []
                },
                {
                    "name": "JavaScript Functions - Working Solution",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has test results\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "    pm.expect(jsonData).to.have.property('testResults');",
                                    "    ",
                                    "    console.log('JavaScript Functions test result:');",
                                    "    console.log('Success:', jsonData.success);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"LessonId\": \"javascript-functions\",\n    \"Code\": \"function addNumbers(a, b) {\\n    return a + b;\\n}\\n\\nfunction multiplyNumbers(a, b) {\\n    return a * b;\\n}\\n\\nfunction calculateFactorial(n) {\\n    if (n <= 1) return 1;\\n    let result = 1;\\n    for (let i = 2; i <= n; i++) {\\n        result *= i;\\n    }\\n    return result;\\n}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/tests/run",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "tests",
                                "run"
                            ]
                        },
                        "description": "Test JavaScript functions lesson with correct implementation"
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "TypeScript Tests",
            "item": [
                {
                    "name": "TypeScript Arrays - Working Solution",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has test results\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "    pm.expect(jsonData).to.have.property('testResults');",
                                    "    ",
                                    "    console.log('TypeScript Arrays test result:');",
                                    "    console.log('Success:', jsonData.success);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"LessonId\": \"typescript-arrays\",\n    \"Code\": \"function reverseArray<T>(arr: T[]): T[] {\\n    return arr.slice().reverse();\\n}\\n\\nfunction findMax(arr: number[]): number | undefined {\\n    if (arr.length === 0) return undefined;\\n    return Math.max(...arr);\\n}\\n\\nfunction sumArray(arr: number[]): number {\\n    return arr.reduce((sum, num) => sum + num, 0);\\n}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/tests/run",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "tests",
                                "run"
                            ]
                        },
                        "description": "Test TypeScript arrays lesson with correct implementation"
                    },
                    "response": []
                },
                {
                    "name": "TypeScript Basic Math - Working Solution",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has test results\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "    pm.expect(jsonData).to.have.property('testResults');",
                                    "    ",
                                    "    console.log('TypeScript Basic Math test result:');",
                                    "    console.log('Success:', jsonData.success);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"LessonId\": \"typescript-basic-math\",\n    \"Code\": \"function square(number: number): number {\\n    return number * number;\\n}\\n\\nfunction addNumbers(a: number, b: number): number {\\n    return a + b;\\n}\\n\\nfunction calculateFactorial(n: number): number {\\n    if (n <= 1) return 1;\\n    let result: number = 1;\\n    for (let i: number = 2; i <= n; i++) {\\n        result *= i;\\n    }\\n    return result;\\n}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/tests/run",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "tests",
                                "run"
                            ]
                        },
                        "description": "Test TypeScript basic math lesson with correct implementation"
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Go Tests",
            "item": [
                {
                    "name": "Go Slices - Working Solution",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has test results\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "    pm.expect(jsonData).to.have.property('testResults');",
                                    "    ",
                                    "    console.log('Go Slices test result:');",
                                    "    console.log('Success:', jsonData.success);",
                                    "    console.log('Test Results:', jsonData.testResults?.length || 0, 'tests');",
                                    "});",
                                    "",
                                    "pm.test(\"Test results have names\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    if (jsonData.testResults && jsonData.testResults.length > 0) {",
                                    "        jsonData.testResults.forEach((testResult, index) => {",
                                    "            pm.expect(testResult).to.have.property('testName');",
                                    "            pm.expect(testResult.testName).to.not.be.empty;",
                                    "            console.log(`Test ${index + 1}: ${testResult.testName} - ${testResult.passed ? 'PASSED' : 'FAILED'}`);",
                                    "        });",
                                    "    }",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"LessonId\": \"go-slices\",\n    \"Code\": \"package main\\n\\n// ReverseSlice returns a new slice with elements in reverse order\\nfunc ReverseSlice(slice []int) []int {\\n\\tif len(slice) == 0 {\\n\\t\\treturn []int{}\\n\\t}\\n\\treversed := make([]int, len(slice))\\n\\tfor i, v := range slice {\\n\\t\\treversed[len(slice)-1-i] = v\\n\\t}\\n\\treturn reversed\\n}\\n\\n// FindMax finds the maximum element in the slice\\n// Returns 0 if slice is empty\\nfunc FindMax(slice []int) int {\\n\\tif len(slice) == 0 {\\n\\t\\treturn 0\\n\\t}\\n\\tmax := slice[0]\\n\\tfor _, v := range slice {\\n\\t\\tif v > max {\\n\\t\\t\\tmax = v\\n\\t\\t}\\n\\t}\\n\\treturn max\\n}\\n\\n// SumSlice calculates the sum of all elements in the slice\\nfunc SumSlice(slice []int) int {\\n\\tsum := 0\\n\\tfor _, v := range slice {\\n\\t\\tsum += v\\n\\t}\\n\\treturn sum\\n}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/tests/run",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "tests",
                                "run"
                            ]
                        },
                        "description": "Test Go slices lesson with correct implementation"
                    },
                    "response": []
                },
                {
                    "name": "Go Functions - Working Solution",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has test results\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success');",
                                    "    pm.expect(jsonData).to.have.property('testResults');",
                                    "    ",
                                    "    console.log('Go Functions test result:');",
                                    "    console.log('Success:', jsonData.success);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"LessonId\": \"go-functions\",\n    \"Code\": \"package main\\n\\n// AddNumbers adds two integers and returns the result\\nfunc AddNumbers(a, b int) int {\\n\\treturn a + b\\n}\\n\\n// MultiplyNumbers multiplies two integers and returns the result\\nfunc MultiplyNumbers(a, b int) int {\\n\\treturn a * b\\n}\\n\\n// CalculateFactorial calculates the factorial of n\\n// Returns 1 for n = 0 or n = 1\\nfunc CalculateFactorial(n int) int {\\n\\tif n <= 1 {\\n\\t\\treturn 1\\n\\t}\\n\\tresult := 1\\n\\tfor i := 2; i <= n; i++ {\\n\\t\\tresult *= i\\n\\t}\\n\\treturn result\\n}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/tests/run",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "tests",
                                "run"
                            ]
                        },
                        "description": "Test Go functions lesson with correct implementation"
                    },
                    "response": []
                }
            ]
        }
    ],
    "auth": {
        "type": "bearer",
        "bearer": [
            {
                "key": "token",
                "value": "{{accessToken}}",
                "type": "string"
            }
        ]
    }
}